// **********************************************
InputFile{='fn.ref';}
//InputFile{='t.ref';}

$Entry Go { = 

	<Prout <P4_Out
		<PostScan 
			<P2_Builder MODULE 
				<P1_Prescaning 
					()<P1_Prescaning_pre <Prout 'P1_Prescaning_pre'>
						0 '\n' <Mount <InputFile>>'\n' 
					><Prout 'P1_Prescaning'>
				><Prout 'P2_Builder'>
			>
		><Prout 'P4_Out'>
	  >
	> ; 

		}



Template comment  ::= { '/*' e. '*/' | '//' e. '\n' } ! ;
Template Digit ::= { '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '0' };
Template Digits	  ::= Digit. { Digits. | } ! ;
Template Letter	  ::= { 'z'|'x'|'c'|'v'|'b'|'n'|'m'|'a'|'s'|'d'|'f'|'g'|'h'|'j'|'k'|'l'|'q'|'w'|'e'|'r'|'t'|'y'|'u'|'i'|'o'|'p'|
			'Z'|'X'|'C'|'V'|'B'|'N'|'M'|'A'|'S'|'D'|'F'|'G'|'H'|'J'|'K'|'L'|'Q'|'W'|'E'|'R'|'T'|'Y'|'U'|'I'|'O'|'P'| '-' | '_' 
			};

Cut {
	0 e. = ;
	int.n END.e = s.s <Cut <- @.n 1> @.e>;
}

DoError { 
	(END.text) e.linetext word.ln END. ,
		<Explode-all @.ln> : '$line:' Digits.line	=	
			<Prout '#### ERROR [ line '<- @.line 1>']: ' <Replace "$separator" ' ' @.text>> 
			<Prout '#### Code: ' @.linetext>
			<Exit>; 
			
	(END.text) END.arg =
			<Prout '#### ERROR [ line ? ]: ' <Replace "$separator" ' ' @.text>>
			<Prout '#### Code: ' <Cut 256 <Explode-all @.arg>> '...'>
			<Exit>; 
}
Replace { t.1 t.2 e.A t.1 e.B = e.A t.2 <Replace t.1 t.2 e.B>; t.1 t.2 e.e=e.e; }

// счет строк для сообщений об ошбках
P1_Prescaning_pre {
	int.line  e.pred '\n' END.next,
		<+ 1 int.line> : int.newline 
		=	@.pred  '\n'<Implode '$line:' @.newline> <P1_Prescaning_pre @.newline @.next>;
	int.line  END.next =  @.next <Implode '$line:' <+ 1 @.line>>;
}


Template separate  ::= { ' ' | '\t' | comment. | '\r' | '\n' | '$Entry' };
Template separateS ::= separate. { separateS. | } ! ;


/////////////////////////////////////////////////////////////
//   1.      prescaning-парсинг (чтение знаков языка)
/////////////////////////////////////////////////////////////
OtherBrack { '>'='<';'}'='{';']'='[';')'='('; }
ImplodeMeta { '+'=(word plus);'-'=(word minus);'*'=(word mul);'/'=(word div);  s.e=<Implode '$' s.e>; e.e=<Implode e.e>; }
P1_Prescaning0 { END.e = <Prout 'P1_Prescaning: [' @.e ']'><P1_Prescaning0 @.e>; }
P1_Prescaning {
	(E.code) separateS. END.next  
					=   <P1_Prescaning  (E.code "$separator") @.next>;
					
	(E.code) 
	{';'|'...'|'..'|'.'|'::='|'::'|':'|'='|'|'|'!'|'@'|','
	 |'+'|'-'|'*'|'/'
	 | '$NOT' | '$not'
	}.item  END.next 
					=  <P1_Prescaning  (E.code <ImplodeMeta @.item>) @.next>;
					
	(E.code) Digits.num  END.next  
					=  <P1_Prescaning  (E.code (int <Numb @.num>)) @.next>; /// todo: вещественные в разных форматах
	(E.code) { Letter. e. }.word { s.notletter END.nn }.next,
		$NOT s.notletter : Letter. ,
		$NOT s.notletter : Digit.
					=   <P1_Prescaning  (E.code ("word" <Implode @.word>)) @.next>;
					
	(E.code) '\'' e.all,
		<P1_Prescaning_quote ('\'') e.all> : (e.text) END.next
					=  <P1_Prescaning  (E.code ("text" e.text)) @.next>;

	(E.code) '"'  e.all,
		<P1_Prescaning_quote ( '"') e.all> : (e.text) END.next
					=  <P1_Prescaning  (E.code ("word" <Implode e.text>)) @.next>;

	// начало скобочного выражения
	(E.code) {'{'|'['|'('|'<'}.br  END.next
					=  <P1_Prescaning  (E.code <Implode @.br' '>) @.next>;
	// конец скобочного выражения
	(E.code) {'}'|']'|')'|'>'}.br  END.next,
		<Implode <OtherBrack @.br>' '> : s.obr,
		@.code : E.A  s.obr  END.B
					=  <P1_Prescaning  (@.A (s.obr @.B)) @.next>;

	// проброс метакодов
	(E.code) word.l END.next,
		<Explode word.l> : '$' e.e 
					=  <P1_Prescaning  (E.code @.l) @.next>;
	
	(E.code) t.unknown  END.next	=  <DoError ('Unexpected item `' @.unknown '`') @.unknown @.next>;

	(E.code)  =  E.code; 
}

P1_Prescaning_quote {
	(t.qu E.text) t.qu END.next = (@.text) @.next;
	(t.qu E.text) '\\' s.metas END.next = <P1_Prescaning_quote (@.qu @.text <Unescape @.metas>) @.next>;
	(t.qu E.text) s.sym END.next = <P1_Prescaning_quote (@.qu @.text @.sym) @.next>;
	(t.qu E.text) t.t END.else
		=	<DoError ('Unecpected text-symbol `' t.t '`') t.t @.else>;
	END.e = <DoError ('<P1_Prescaning_quote  ' @.e ' > - ???')>;
}

Unescape {
	'\'' = '\'';
	'"' = '"';
	'n' = '\n';
	't' = '\t';
	'r' = '\r';
	'\\' = '\\';
}

//////////////////////////////////////////////////////////////////////////////////////////////
//   2.      структуризация и синтаксический анализ (генерация структуры программы)
//////////////////////////////////////////////////////////////////////////////////////////////

// ===== Переменные =====
// слово.имя ? (var (имя) слово)
// {цепь}.имя ? (group (имя) <S цепь>)
// {цепь}[F..T].имя ? (group (имя) (repeat F T <S цепь>))
// слово[F..T].имя ? (group (имя) (repeat F T (var () слово)))

// ===== Ссылки =====
// @.имя ? (lnk имя)
// {@ | слово}.имя {::слово}[inf].путь ? (lnk имя @.путь)

// ===== Данные =====
// целое ? (int целое)
// вещ-е ? (real вещ-е)
// слово ? (word слово)
// «литеры» ? (word литеры)
// '~~~' ? (text ~~~)

// ===== Скобки =====
// (~~~) ? (B ~~~)
// <слово ~~~> ? (exec (слово) ~~~)


Template FunctionName ::= (word word.fname) ; ///todo: словность?
Template TemplateName ::= (word word.fname) ; ///todo: словность?
Template VarName ::= ({word|int} e.text) ;
Template VarPath ::= { "::" ("word" e. ) VarPath. | } !;

ParseFromTo{
	e.from ".." e.to,
		<P2_Builder @.from> : { ({lnk|var|int} e. ) }.tfrom,
		<P2_Builder @.to  > : { ({lnk|var|int} e. ) }.tto  =  @.tfrom @.tto;
	e.from "...",
		<P2_Builder @.from> : { ({lnk|var|int} e. ) }.tfrom = @.tfrom (int "inf");
	(word "inf") = (int "inf")(int "inf");
}

P2_Builder0  { e.e = <Prout '<P2_Builder ' e.e '>'> <P2_Builder0 e.e>; }
P2_Builder {

   { MODULE | LEFT_PART | OBRAZEC } = ;

   // шаблон  /// todo: проверку на словность имени
   MODULE (word "Template") {"$separator" |} TemplateName.tname {"$separator" |} "::=" e.leftPart "$;" END.next
	   =	( "template" @.tname <P2_Builder  "LEFT_PART"  @.leftPart> ) 
		<P2_Builder  "MODULE"  @.next> ;
   // функция
   MODULE  FunctionName.fname {"$separator" |} ("{ " END.block ) {"$separator"|} { "$;" |} END.next
	   =	( "func" @.fname  <P2_Builder  BLOCK  @.block> )
		<P2_Builder  MODULE  @.next> ;

   ///  todo блоком
   LEFT_PART e.obr "$," END.if							=	("left-part" <P2_Builder  OBRAZEC @.obr> <P2_Builder  CONDITION @.if>);
   LEFT_PART e.obr								=	("left-part" <P2_Builder  OBRAZEC @.obr>);

   CONDITION e.cond1   "$," END.condN 						= 	<P2_Builder  CONDITION @.cond1> <P2_Builder  CONDITION @.condN>;
   CONDITION e.obrazec "$:" e.result  						= 	("if" ("right-part" <P2_Builder  RIGHT_PART @.obrazec>) ("left-part" <P2_Builder  OBRAZEC @.result>));

   BLOCK   e.predl "$;" END.next						=    	<P2_Builder  SENTENCE @.predl>  <P2_Builder  BLOCK @.next> ;
   BLOCK  {"$separator" |} 							= 	;	// пропускает когда блок пуст!
   
   SENTENCE e.leftpart "$=" END.rightpart 					=	("sentence" <P2_Builder  LEFT_PART @.leftpart> ("right-part" <P2_Builder  RIGHT_PART @.rightpart>));
// ===== Переменные =====
   {OBRAZEC|RIGHT_PART}.state ("word" e.word)"$." VarName.vname END.next	= 	(var (@.vname::text) e.word) <P2_Builder  @.state @.next>;
   OBRAZEC  ("{ " e.chain) "$." VarName.vname END.next				=	(group (@.vname::text) <P2_Builder OBRAZEC @.chain>) <P2_Builder  OBRAZEC @.next>;
   OBRAZEC  ("{ " e.chain)("[ " e.fromto) "$." ("word" e.name)  END.next	=	(group (@.name) (repeat <ParseFromTo @.fromto> <P2_Builder OBRAZEC @.chain>)) <P2_Builder  OBRAZEC @.next>;
   OBRAZEC  ("{ " e.chain)("[ " e.fromto)  END.next				=	(group () (repeat <ParseFromTo @.fromto> <P2_Builder OBRAZEC @.chain>)) <P2_Builder  OBRAZEC @.next>;
   OBRAZEC  ("{ " e.chain) END.next						=	(group () <P2_Builder OBRAZEC @.chain>) <P2_Builder  OBRAZEC @.next>;
   OBRAZEC  ("word" e.word)"$." END.next					= 	(var () e.word) <P2_Builder OBRAZEC  @.next>;
								
/// todo нормальные варианты
   OBRAZEC  "$|"  END.next  							=	(the-variant) <P2_Builder  OBRAZEC @.next> ;
   OBRAZEC  "$!"  END.next  							=	(cutter) <P2_Builder  OBRAZEC @.next> ;
   OBRAZEC  ("word" e.word)("[ " e.fromto) "$." ("word" e.name)  END.next	=	(group (@.name) (repeat <ParseFromTo @.fromto> (var () @.word))) <P2_Builder  OBRAZEC @.next>;
// ===== Ссылки =====
   {OBRAZEC|RIGHT_PART}.state { "$@" | ("word" e. )} "$." VarName.vname VarPath.path END.next
										= 	 (lnk @.vname::text @.path) <P2_Builder  @.state @.next>;
   {OBRAZEC|RIGHT_PART}.state "$@" "$." VarName.vname END.next			= 	 (lnk @.vname::text) <P2_Builder  @.state @.next>;
// ===== Данные =====
   {OBRAZEC|RIGHT_PART}.state ("int" int.n)	END.next			=	(int  @.n) <P2_Builder  @.state @.next>;
   {OBRAZEC|RIGHT_PART}.state ("real" real.n)	END.next			=	(real @.n) <P2_Builder  @.state @.next>;
   {OBRAZEC|RIGHT_PART}.state ("word" e.w)	END.next			=	(word @.w) <P2_Builder  @.state @.next>;
   {OBRAZEC|RIGHT_PART}.state ("text" e.t)	END.next			=	(text @.t) <P2_Builder  @.state @.next>;
   {OBRAZEC|RIGHT_PART}.state "$NOT"		END.next			=	"$not" <P2_Builder  @.state @.next>;

// ===== Скобки =====
   {OBRAZEC|RIGHT_PART}.state ("( " e.chain)	 END.next			=	("( " <P2_Builder  @.state @.chain>) <P2_Builder  @.state @.next>;
   RIGHT_PART ("< " {"$separator"|} ("word" word.fname) e.chain) END.next	=	(exec (@.fname) <P2_Builder  RIGHT_PART @.chain>) <P2_Builder  RIGHT_PART @.next>;
   {OBRAZEC|RIGHT_PART} {"$separator"|} 					= ;
   

   word.state "$separator" END.next   =	<P2_Builder @.state @.next>;	   
   word.state word.t       END.next, 
			<Explode word.t> : '$line:' Digits.
			=	@.t <P2_Builder @.state @.next>;
   BLOCK   END.predl    =    <P2_Builder  SENTENCE @.predl>;

   // Обработка ошибок 
   MODULE END.next	   =  <DoError ('temlpate or function defenition expected') @.next>;
   word.state  e.next 	   =  <DoError (word.state '-item expected') @.next>;
}


//   3.      семантический анализ и оптимизация (перестройка структуры программы)
P3_Semantic {
	END.a = @.a;
}


//   4.      построение байт/xml-кода
P4_Out {
//	()  END.next = '' <P4_Out  @.next>;
	(func)  END.next = '' <P4_Out  @.next>;
	(sentense)  END.next = '' <P4_Out  @.next>;
	
	(template)  END.next = '' <P4_Out  @.next>;
	(left-part )  END.next = '' <P4_Out  @.next>;

	(right-part)  END.next = '' <P4_Out  @.next>;
	(exec)  END.next = '' <P4_Out  @.next>;
	
	(if)  END.next = '' <P4_Out  @.next>;
	
	(var)  END.next = '' <P4_Out  @.next>;
	(group)  END.next = '' <P4_Out  @.next>;
	(cutter)  END.next = '' <P4_Out  @.next>;
	(the-variant)  END.next = '' <P4_Out  @.next>;
	(lnk)  END.next = '' <P4_Out  @.next>;
	(int)  END.next = '' <P4_Out  @.next>;
	(real)  END.next = '' <P4_Out  @.next>;
	(word)  END.next = '' <P4_Out  @.next>;
	(text)  END.next = '' <P4_Out  @.next>;
	("( ")  END.next = '' <P4_Out  @.next>;
	
	=;

	E.else = <DoError ('Problem after semantic!') @.else>;
}


// почее
PostScan {
	word.A END.next,
		<Explode word.A> : '$line:' END. = <PostScan @.next>;
	(END.A) END.next	=	(<PostScan @.A>) <PostScan @.next>;	
	t.A  END.next		=	@.A <PostScan @.next>;
				=;
}
