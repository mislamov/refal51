
Template theword ::= (word e.value);
Template theint   ::= (int e.value);

Template varname ::= { theword. | theint. } ;


Template FUNCTION ::= 
	{"$"(word ENTRY)' '|}  
	(word t.name) {' '|} ("{" BLOCK.body) {' '|};

Template TEMPLATE ::=
	(word Template) ' ' (word t.name) {' '|} ":" ":" "=" LEFT_PART.body ;

Template BLOCK ::= SENTENCE.head ";" {' '|} { BLOCK. |}.tail ;
Template SENTENCE   ::=  { LEFT_PART. | }.left_part "=" { RIGHT_PART. | }.right_part ;

Template LEFT_PART  ::=  L_PATTERN.pattern { IFs. |}.conditions ;
Template RIGHT_PART ::=  R_PATTERN.pattern ;
		//$NOT @.pattern : e. (~( e. VAR. E. )~) E.
		//<SELECT_ALLVAR PATTERN.pattern> : $empty ;   // упростиь, когда появятся сканирующие скобки, или апостраф баша

Template IFs ::= "," IF.head {IFs.|}.tail;
Template IF  ::= RIGHT_PART.right_part ":" L_PATTERN.left_part;


Template L_PATTERN ::= { {}.p | L_PATTERN_nonemp.p } ;
Template R_PATTERN ::= { {}.p | R_PATTERN_nonemp.p } ;

Template L_PATTERN_nonemp ::=
	L_ITEM.head {L_PATTERN_nonemp.tail | {}.tail } ;
Template R_PATTERN_nonemp ::=
	R_ITEM.head {R_PATTERN_nonemp.tail | {}.tail } ;

Template L_ITEM ::=
	{ ' '| ("(" L_PATTERN. ) | VAR. | LNK. | SYMBOL. } ;

Template R_ITEM ::=
	{ ' '| ("(" RIGHT_PART. ) | ("<" R_PATTERN_nonemp. ) | VAR. | LNK. | SYMBOL. } ;

Template SYMBOL ::=
	{ theword. | (int e.) | (real e.) | (text e.) | "$" (word empty) } ;


Template VAR    ::= {
	theword.type1  	       SPECIFICATORS.s1  "." { varname. | }.name1 |
	GROUP_OR_VARIANT.type2  SPECIFICATORS.s2  { "." varname. | }.name2  
};
					

Template LNK    ::=  { {  "@"{theword.|} | "&"{theword.|} | theword. }.type "." varname.name }.thevar  VAR_PATH.path ;   // использование @ обязательно!
Template VAR_PATH ::= { ":" ":" varname. VAR_PATH. | $empty } ;

Template GROUP_OR_VARIANT ::= ("{" e.) ; //todo: уточнить

Template SPECIFICATORS ::= { { REPEATER. }.head SPECIFICATORS.tail |} ;
Template REPEATER ::= ("[" e.); // todo: уточнить


